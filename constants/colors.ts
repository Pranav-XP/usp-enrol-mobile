/**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

const tintColorLight = "#0a7ea4";
const tintColorDark = "#fff";

export const Colors = {
  light: {
    "primary": "rgb(0, 105, 112)",
    "onPrimary": "rgb(255, 255, 255)",
    "primaryContainer": "rgb(124, 244, 255)",
    "onPrimaryContainer": "rgb(0, 32, 34)",
    "secondary": "rgb(74, 99, 101)",
    "onSecondary": "rgb(255, 255, 255)",
    "secondaryContainer": "rgb(204, 232, 234)",
    "onSecondaryContainer": "rgb(5, 31, 33)",
    "tertiary": "rgb(79, 94, 125)",
    "onTertiary": "rgb(255, 255, 255)",
    "tertiaryContainer": "rgb(215, 226, 255)",
    "onTertiaryContainer": "rgb(10, 27, 54)",
    "error": "rgb(186, 26, 26)",
    "onError": "rgb(255, 255, 255)",
    "errorContainer": "rgb(255, 218, 214)",
    "onErrorContainer": "rgb(65, 0, 2)",
    "background": "rgb(250, 253, 252)",
    "onBackground": "rgb(25, 28, 29)",
    "surface": "rgb(250, 253, 252)",
    "onSurface": "rgb(25, 28, 29)",
    "surfaceVariant": "rgb(218, 228, 229)",
    "onSurfaceVariant": "rgb(63, 72, 73)",
    "outline": "rgb(111, 121, 122)",
    "outlineVariant": "rgb(190, 200, 201)",
    "shadow": "rgb(0, 0, 0)",
    "scrim": "rgb(0, 0, 0)",
    "inverseSurface": "rgb(45, 49, 49)",
    "inverseOnSurface": "rgb(239, 241, 241)",
    "inversePrimary": "rgb(77, 217, 228)",
    "elevation": {
      "level0": "transparent",
      "level1": "rgb(238, 246, 245)",
      "level2": "rgb(230, 241, 241)",
      "level3": "rgb(223, 237, 237)",
      "level4": "rgb(220, 235, 235)",
      "level5": "rgb(215, 232, 232)"
    },
    "surfaceDisabled": "rgba(25, 28, 29, 0.12)",
    "onSurfaceDisabled": "rgba(25, 28, 29, 0.38)",
    "backdrop": "rgba(41, 50, 51, 0.4)",
    "valid": "rgb(56, 107, 1)",
    "onValid": "rgb(255, 255, 255)",
    "validContainer": "rgb(183, 244, 129)",
    "onValidContainer": "rgb(13, 32, 0)"
  },
  dark: {
    "primary": "rgb(77, 217, 228)",
    "onPrimary": "rgb(0, 54, 58)",
    "primaryContainer": "rgb(0, 79, 84)",
    "onPrimaryContainer": "rgb(124, 244, 255)",
    "secondary": "rgb(177, 203, 206)",
    "onSecondary": "rgb(27, 52, 55)",
    "secondaryContainer": "rgb(50, 75, 77)",
    "onSecondaryContainer": "rgb(204, 232, 234)",
    "tertiary": "rgb(183, 199, 234)",
    "onTertiary": "rgb(33, 48, 76)",
    "tertiaryContainer": "rgb(56, 71, 100)",
    "onTertiaryContainer": "rgb(215, 226, 255)",
    "error": "rgb(255, 180, 171)",
    "onError": "rgb(105, 0, 5)",
    "errorContainer": "rgb(147, 0, 10)",
    "onErrorContainer": "rgb(255, 180, 171)",
    "background": "rgb(25, 28, 29)",
    "onBackground": "rgb(224, 227, 227)",
    "surface": "rgb(25, 28, 29)",
    "onSurface": "rgb(224, 227, 227)",
    "surfaceVariant": "rgb(63, 72, 73)",
    "onSurfaceVariant": "rgb(190, 200, 201)",
    "outline": "rgb(137, 147, 147)",
    "outlineVariant": "rgb(63, 72, 73)",
    "shadow": "rgb(0, 0, 0)",
    "scrim": "rgb(0, 0, 0)",
    "inverseSurface": "rgb(224, 227, 227)",
    "inverseOnSurface": "rgb(45, 49, 49)",
    "inversePrimary": "rgb(0, 105, 112)",
    "elevation": {
      "level0": "transparent",
      "level1": "rgb(28, 37, 39)",
      "level2": "rgb(29, 43, 45)",
      "level3": "rgb(31, 49, 51)",
      "level4": "rgb(31, 51, 53)",
      "level5": "rgb(32, 55, 57)"
    },
    "surfaceDisabled": "rgba(224, 227, 227, 0.12)",
    "onSurfaceDisabled": "rgba(224, 227, 227, 0.38)",
    "backdrop": "rgba(41, 50, 51, 0.4)",
    "valid": "rgb(156, 215, 105)",
    "onValid": "rgb(26, 55, 0)",
    "validContainer": "rgb(40, 80, 0)",
    "onValidContainer": "rgb(183, 244, 129)"
  },
};